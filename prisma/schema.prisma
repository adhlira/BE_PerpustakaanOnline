// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum bookStatusReservation{
  PENDING
  AVAILABLE
  NOTIFIED
}

model Roles {
  id    Int     @id @default(autoincrement())
  name  String
  Users Users[]

  @@map("role")
}

model Users {
  id           Int      @id @default(autoincrement())
  role_id      Int
  username     String   @unique
  password     String
  name         String
  email        String
  phone_number String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  Roles               Roles                 @relation(fields: [role_id], references: [id])
  Member              BorrowingByMembers[]  @relation("Member")
  Staff               BorrowingByMembers[]  @relation("Staff")
  BorrowingByVisitors BorrowingByVisitors[]
  Tokens              Tokens[]
  BookReservation     BookReservation[]

  @@map("users")
}

model Books {
  id                        Int                         @id @default(autoincrement())
  title                     String
  author                    String
  isbn                      String                      @unique
  publisher                 String
  publication_years         Int
  category                  String
  status                    String
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  DetailBorrowingByMembers  DetailBorrowingByMembers[]
  DetailBorrowingByVisitors DetailBorrowingByVisitors[]
  BookReservation           BookReservation[]

  @@map("books")
}

model Visitors {
  id                  Int                   @id @default(autoincrement())
  name                String
  email               String                @unique
  phone_number        String                @unique
  visit_date          DateTime              @default(now())
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  BorrowingByVisitors BorrowingByVisitors[]

  @@map("visitors")
}

model BorrowingByMembers {
  id          Int      @id @default(autoincrement())
  member_id   Int
  staff_id    Int
  borrow_date DateTime @default(now())
  due_date    DateTime
  status      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Member                   Users                      @relation("Member", fields: [member_id], references: [id])
  Staff                    Users                      @relation("Staff", fields: [staff_id], references: [id])
  DetailBorrowingByMembers DetailBorrowingByMembers[]

  @@map("borrowing_by_members")
}

model DetailBorrowingByMembers {
  loan_id     Int
  book_id     Int
  return_date DateTime?
  late_charge Int
  status      String
  Loan        BorrowingByMembers @relation(fields: [loan_id], references: [id])
  Book        Books              @relation(fields: [book_id], references: [id])

  @@id([loan_id, book_id])
  @@map("detail_borrowing_by_members")
}

model BorrowingByVisitors {
  id          Int      @id @default(autoincrement())
  visitor_id  Int
  staff_id    Int
  borrow_date DateTime @default(now())
  due_date    DateTime
  status      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Visitor                   Visitors                    @relation(fields: [visitor_id], references: [id])
  Users                     Users                       @relation(fields: [staff_id], references: [id])
  DetailBorrowingByVisitors DetailBorrowingByVisitors[]

  @@map("borrowing_by_visitors")
}

model DetailBorrowingByVisitors {
  borrowing_id Int
  book_id      Int
  return_date  DateTime?
  late_charge  Int
  status       String

  Borrowing BorrowingByVisitors @relation(fields: [borrowing_id], references: [id])
  Book      Books               @relation(fields: [book_id], references: [id])

  @@id([book_id, borrowing_id])
  @@map("detail_borrowing_by_visitors")
}

model Tokens {
  id         Int      @id @default(autoincrement())
  userId     Int
  token      String   @unique
  expired_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Users Users @relation(fields: [userId], references: [id])

  @@map("tokens")
}

model BookReservation {
  id                Int      @id @default(autoincrement())
  member_id         Int
  book_id           Int
  reservation_date  DateTime
  status            bookStatusReservation
  notification_sent Boolean
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  Users Users @relation(fields: [member_id], references: [id])
  Book  Books @relation(fields: [book_id], references: [id])

  @@map("book_reservation")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Roles {
  id    Int     @id @default(autoincrement())
  name  String
  Users Users[]

  @@map("role")
}

model Users {
  id           Int      @id @default(autoincrement())
  role_id      Int
  username     String   @unique
  password     String
  name         String
  email        String
  phone_number String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  Roles              Roles                @relation(fields: [role_id], references: [id])
  BorrowingByMembers BorrowingByMembers[]

  @@map("users")
}

model Books {
  id                 Int                  @id @default(autoincrement())
  title              String
  author             String
  isbn               String               @unique
  publisher          String
  publication_years  Int
  category           String
  status             String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  BorrowingByMembers BorrowingByMembers[]

  @@map("books")
}

model Visitors {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  phone_number String   @unique
  visit_date   DateTime @default(now())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("visitors")
}

model BorrowingByMembers {
  id          Int      @id @default(autoincrement())
  user_id     Int
  book_id     Int
  borrow_date DateTime @default(now())
  due_date    DateTime
  return_date DateTime?
  late_charge Int
  status      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Users Users @relation(fields: [user_id], references: [id])
  Books Books @relation(fields: [book_id], references: [id])

  @@map("borrowing_by_members")
}
